openapi: 3.0.3
info:
  version: '1.0.0'
  title: Spring starter
externalDocs:
  description: Github repository
  url: https://github.com/ablil/spring-starter
tags:
  - name: todo
    description: Todos management

security:
  - bearerAuth: []

paths:
  /api/todos:
    get:
      summary: Get list of todos
      operationId: getAllTodos
      tags:
        - todo
      parameters:
        - $ref: '#/components/parameters/OffsetQuery'
        - $ref: '#/components/parameters/LimitQuery'
        - $ref: '#/components/parameters/keywordParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/statusParam'
      responses:
        200:
          description: List of todos owned by the authenticated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create new todo
      operationId: createTodo
      tags:
        - todo
      requestBody:
        $ref: '#/components/requestBodies/Todo'
      responses:
        201:
          $ref: '#/components/responses/Todo'
  /api/todos/{id}:
    get:
      summary: Get single todo by id
      operationId: getTodo
      tags:
        - todo
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: "Todo id"
      responses:
        200:
          $ref: '#/components/responses/Todo'
    put:
      summary: Update a todo (full update)
      description: 'Full update of todo, status is reset to PENDING if not provided and tags are entirely replaced'
      operationId: updateTodo
      tags:
        - todo
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/Todo'
      responses:
        200:
          $ref: '#/components/responses/Todo'
    delete:
      summary: Delete a todo by id
      operationId: deleteTodo
      tags:
        - todo
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: "Todo id"
      responses:
        204:
          description: 'Todo removed successfully'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    idParam:
      in: path
      name: id
      schema:
        type: integer
        format: int64
      required: true
      description: "Todo id"
    OffsetQuery:
      name: offset
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/Offset'
    LimitQuery:
      in: query
      name: limit
      required: false
      description: Limit the number of returned result, a default value is set if not provided
      schema:
        $ref: '#/components/schemas/Limit'
    keywordParam:
      in: query
      name: keyword
      description: 'Search by free text included in title, content or (case insensitive)'
      schema:
        type: string
    sortParam:
      in: query
      name: sort
      required: false
      description: >
        To indicate sorting direction, fields may be prefixed with + (ascending) or - (descending), e.g. /todo?sort=+id.
        By default items are sorted by id
      schema:
        type: string
        pattern: '^[+-]?(id|title|created_at|updated_at)$'
    statusParam:
      in: query
      name: status
      description: 'filter by status, return all if param is missing'
      schema:
        $ref: '#/components/schemas/Status'

  schemas:
    Status:
      type: string
      enum:
        - PENDING
        - DONE
    Offset:
      type: integer
      description: Number of items to skip from the result list
    Limit:
      type: integer
      description: Limit the number of results returned by teh backend
    Todo:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 1
        title:
          type: string
          example: "buy groceries"
        content:
          type: string
          example: 'lorem ipsum'
        status:
          $ref: '#/components/schemas/Status'
          example: PENDING
        tags:
          type: array
          items:
            type: string
          example: ['foo', 'bar']
          description: 'list of tags associated with the Todo'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - title
    Pagination:
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: Total number of items calculated by the backend for the given query
        offset:
          type: integer
          format: int64
          description: Number of skipped items from the result list
        limit:
          type: integer
          format: int64
          description: The number of items returned by the current query (!= total)
  requestBodies:
    Todo:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Todo'

  responses:
    Todo:
      description: 'todo'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Todo'
    GenericError:
      description: 'Generic error'
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: 'business error code'
              message:
                type: string
                description: 'error message'
              error:
                type: string
                description: 'Http status error name (eg: Not found)'