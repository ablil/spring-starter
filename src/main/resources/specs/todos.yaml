openapi: 3.0.3
info:
  version: '1.0.0'
  title: Spring starter
tags:
  - name: todo
    description: Todos management

paths:
  /api/todos:
    get:
      summary: Get list of todos
      operationId: getAllTodos
      tags:
        - todo
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            format: int31
            minimum: 1
            default: 1
        - in: query
          name: size
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 20
        - in: query
          name: keyword
          description: 'case insensitive'
          schema:
            type: string
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/SortFilter'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/SortOrder'
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/Status'

      responses:
        200:
          description: List of todos owned by the authenticated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  total:
                    type: integer
                    example: 10
                  page:
                    type: integer
                    example: 1
                required:
                  - total
                  - page
                  - todos

    post:
      summary: Create new todo
      operationId: createTodo
      tags:
        - todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        201:
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
  /api/todos/{id}:
    get:
      summary: Get single todo by id
      operationId: getTodo
      tags:
        - todo
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: "Todo id"
      responses:
        200:
          description: 'Todo by id returned successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
    put:
      summary: Update a todo (full update)
      description: 'Full update of todo, status is reset to PENDING if not provided and tags are entirely replaced'
      operationId: updateTodo
      tags:
        - todo
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: "Todo id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        200:
          description: 'todo content updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
    delete:
      summary: Delete a todo by id
      operationId: deleteTodo
      tags:
        - todo
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: "Todo id"
      responses:
        204:
          description: 'Todo removed successfully'
components:
  schemas:
    Status:
      type: string
      enum:
        - PENDING
        - DONE
    Todo:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 1
        title:
          type: string
          example: "buy groceries"
        content:
          type: string
          example: 'lorem ipsum'
        status:
          $ref: '#/components/schemas/Status'
          example: PENDING
        tags:
          type: array
          items:
            type: string
          example: ['foo', 'bar']
          description: 'list of tags associated with the Todo'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - title
    SortFilter:
      type: string
      enum: ['MODIFIED_AT', 'CREATED_AT', 'TITLE', 'ID']
      default: 'ID'
    SortOrder:
      type: string
      enum: ['ASC', 'DESC']
      default: 'ASC'